// generated by ../php-to-scala/php-to-scala.php on 2010-04-27T19:49:39-05:00

import php._;
import scala.Predef.{ any2ArrowAssoc => _ }

object test_2_php extends php.script {
  override def include {
var ni: ref = undef;
var nj: ref = undef;
var dump: ref = undef;
var i: integer = 0;
var j: integer = 0;// adapted from http://www.php.happycodings.com/Algorithms/code33.html

// Function that calculates the roman string to the given number:

def dec2roman(f: ref)
: ref = {
var roman: ref = undef;
var amount: ref = undef;
var retval: ref = undef;
var old_k: ref = undef;

	// Return false if either $f is not a real number, $f is bigger than 3999 or $f is lower or equal to 0:
	if(!is_numeric(f) || f > 3999 || f <= 0) return false;

	// Define the roman figures:
	roman = array.map("M" -> 1000, "D" -> 500, "C" -> 100, "L" -> 50, "X" -> 10, "V" -> 5, "I" -> 1);

	amount = array.list();

	// Calculate the needed roman figures:
	roman.foreach{ (k:ref,v:ref) => if((amount(k) = floor(f / v)) > 0) f -= amount(k) * v }

	// Build the string:
	retval = "";
	amount.foreach{ (k:ref,v:ref) => {
		retval +=& ( v <= 3  |? { if(_)  str_repeat(k, v)  else  k +& old_k });
		old_k = k;
	} }

	// Replace some spacial cases and return the string:
	return str_replace(array.list("VIV","LXL","DCD"), array.list("IX","XC","CM"), retval);
}

// Function to get the decimal value of a roman string:
def roman2dec(str: ref = "")
: ref = {
var roman: ref = undef;
var i: integer = 0;
var str: ref = undef;
var values: ref = undef;
var sum: integer = 0;
var curr: ref = undef;
var next: ref = undef;

	// Return false if not at least one letter is in the string:
	if(is_numeric(str)) return false;

	// Define the roman figures:
	roman = array.map("M" -> 1000, "D" -> 500, "C" -> 100, "L" -> 50, "X" -> 10, "V" -> 5, "I" -> 1);

	// Convert the string to an array of roman values:
	
i = 0;
while( i < strlen(str)) {
 { if(isset(roman(strtoupper(str(i))))) values +=  roman(strtoupper(str(i))) };
 i++
}
;

	// Calculate the sum of that array:
	sum = 0;
	while ({curr = current(values); curr})
	{
		next = next(values);
		next > curr  |? { if(_)  sum += next - curr + 0 * next(values)  else  sum += curr };
	}

	// Return the value:
	return sum;
}

if(count(argv) > 2) {
    ni = argv(1);
    nj = argv(2);
    dump = "";
    
i=0;
while( i< ni) {
 { 
      
j=0;
while( j< nj) {
 { 
        dump +=& ( dec2roman(j+0));
       };
 (j = j + 1)
}

     };
 (i = i + 1)
}

    echo("Total bytes: " +& strlen(dump));
}
else if(is_numeric(argv(1))) {
    echo(dec2roman(argv(1)));
}
else {
    echo(roman2dec(argv(1)));
}

  }
}
